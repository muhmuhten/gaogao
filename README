gaogao - human-unfriendly wrapper for jail_set(2)
=================================================

Usage
-----

    gaogao [<type><data> ...] ["" prog...]

`<type>` is a single character, optionally prefixed by a space, and the meaning
of `<data>` depends on `<type>` as follows:

- `-`: a flag string containing the upper- and lower-case letters `cuad`,
  JAIL_CREATE, JAIL_UPDATE, JAIL_ATTACH, and JAIL_DYING, respectively. The flag
  is ORed in on a lowercase letter and masked out for an uppercase letter. See
  jail(2) for detail on what the flags mean.
- `S`: a zero-terminated string, `<data>`
- `0`: NULL; `<data>` and discarded
- `J`: an int; `<data>` is parsed by strtol(3)
- `B`: a sequence of bytes; `<data>` is parsed by calling strtol(3) repeatedly,
  skipping one separator character after each call.

Description
-----------

The `gaogao` program is a very thin wrapper around FreeBSD's jail_set(2) system
call. It reads parameters from its command line up to the first empty string.
calls jail_set(2), and, if successful, execvp(3)s the rest of its command line.

In order to minimize parsing complexity, `gaogao` takes its arguments only as
*char-tagged unions*. That is, each argument consists of a single character
denoting its type followed by a string representing its value. Optionally, for
compatibility with skarnet's execlineb syntax, parameters may be prefixed with
a single space, which is ignored.

The interface is admittedly not very human-friendly; calls looks something like
`gaogao Sjid J6 Snopersist Z MCu`. While it is important that `gaogao` is not
hostile to being run from a shell (which restricts its tag characters), other
design considerations take priority over presenting a friendly interface:

- `gaogao` provides a *scriptable* interface to jail_set(2). This requires its
  input to be simple to emit correctly, while being expressive enough to set
  any reasonable parameters a user might supply without neeeding recompilation.

- `gaogao` wraps jail_set(2) as thinly as reasonable. Ideally, it would build
  static iovecs, call jail_set(2), then execve(2); `gaogao` reads parameters
  from its command line only as a concession to scripting.

- `gaogao` avoids complex, error-prone parsing; its input format is designed to
  be trivial for it to *read*, and simple for another program to *write*. It
  outsources the task of parsing integers and IP addresses to library routines
  strtol(3) and inet_pton(3), respectively.

It should be very possible to write a program to parse arguments and pass them
to `gaogao`; since `gaogao` handles the necessary library calls and exposes a
textual interface, that program can easily be in a language better suited to
string manipulation than C.

Sanity under process supervision is an explicit goal for `gaogao`. jail(8) is
unsuitable because it *assumes double-forking daemons*: it forks and expects
the jail command to exit successfully, providing no support for signalling a
long-running process.

`gaogao` tries to do its job and get out of the way (i.e. exec). If this is not
sufficient, it's hopefully possible to script around it.

Caveats
-------

This program is probably not correct. The Makefile is almost certainly wrong.
There's no testing beyond verifying that it outwardly appears to work for me.

The interface should be considered experimental and may change at any time.
This document is not necessarily updated to the state of the code; in case of
inconsistency, options are described by the `switch (**argv)` in gaogao.c.

Improvements would be appreciated.
