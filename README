gaogao - human-unfriendly wrapper for jail_set(2)
=================================================

Usage
-----

    gaogao [<type><data> ...] ["" prog...]
	gaogao { [<type><data> ...] } [prog...]

`<type>` is a single character, optionally prefixed by a space, and the meaning
of `<data>` depends on `<type>` as follows:

- `-`: a flag string containing the upper- and lower-case letters `cuad`,
  JAIL_CREATE, JAIL_UPDATE, JAIL_ATTACH, and JAIL_DYING, respectively. The flag
  is ORed in on each lowercase letter and masked out on each uppercase letter.
  See jail(2) for detail on what the flags mean.
- `S`: a zero-terminated string, `<data>`
- `0`: NULL; `<data>` is discarded
- `B`: a sequence of bytes; `<data>` is parsed by calling strtol(3) repeatedly,
  skipping one separator character after each call
- `J`: an int; `<data>` is parsed by strtol(3)

Description
-----------

The `gaogao` program is a very thin wrapper around FreeBSD's jail_set(2) system
call. It reads parameters from its command line up to the first empty string,
calls jail_set(2), and, if successful, execvp(3)s the rest of its command line.

`gaogao`'s main purpose is to expose jail functionality to scripting at a lower
level than jail(8). Although its interface may be awkward for interactive use,
it is amenable to a wrapper program providing a more conventional interface, as
`gaogao`'s input format is intentionally simple to emit correctly.

To minimize parsing complexity, `gaogao` reads options from the command line up
to the first empty argument as a sequence of char-tagged unions: each argument
is a simple string representation of a value prefixed by a format marker. (For
use with [execline](http://skarnet.org/software/execline/), up to one  space is
ignored before each option.) Each option is transcribed by very *simple* code
into an iovec and passed directly to jail_set(2). Any arguments past the first
empty string are not parsed at all but passed to execvp(3) directly.

Sanity under process supervision is an explicit goal for `gaogao`. jail(8) is
unsuitable because it *assumes double-forking daemons*: it forks and expects
the jail command to exit successfully, and fails to support sending signals to
a long-running process.

On the whole, `gaogao` tries to do its job and get out of the way (i.e. exec);
and if that's not sufficient, to provide the tools to script around it.

Caveats
-------

This program is probably not correct. The Makefile is almost certainly wrong.
There's no testing beyond verifying that it outwardly appears to work for me.

The interface should be considered experimental and may change at any time.
This document is not necessarily updated to the state of the code; in case of
inconsistency, options are described by the `switch (**argv)` in gaogao.c.

Please report any unintentional architecture-dependence! There's likely to be
e.g. endianness-dependency when specifying certain jail parameters.

Improvements would be appreciated.
